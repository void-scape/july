use core::basic;
use core::intrinsics;

use import;

main: () -> i32 {
    test(double(2) == 4);
    test(double(4) == 8);
    test(double(28) == 56);
    test(seed() == 42);
    test(var_2_var() == 16);
    test(simple_if_then(true, 4) == 2);
    test(24 == 24);
    test(simple_float() == 0.7 * 2.);
    test(0.7 * 2. == 0.7 * 2.);
    test((1. * 4.) / 1.2 == 1. * 4. / 1.2)
    test(1. * 4. / 1.2 == 1. * (4. / 1.2))
    simple_for();
    scope();
    test(arr_ref_deref());
    test(cast_clobber());
    test(bitwise_ops());
    test(imported_func() == 69);
    
    0
}

// ------------ Structs ------------

// size: 24, alignment: 8
Sandwich: struct {
    
    bread: Bread,
    // size:    16, alignment: 8
    butter: u8,
}

// size: 16, alignment: 8
Bread: struct {
    grain: i32,
    // size:     4, alignment: 4
    // padding:  4
    seed: i64,
}

// Recursive structs have infinite size!

// TODO:
// // size: 1, alignment: 1
// Lettuce: enum {
//     Crisp, // 0
//     Soggy, // 1
// }

// ------------ Return Statements ------------
//
// ```
// return [<expr>];
// ```
//
// ```
// some_block: i32 {
//     <expr: i32>
// }
// ```

int_lit: () -> i32 {
    12
}

bin_op: () -> i32 {
    int_lit() + 4
}

struct_definition: () -> Bread {
    Bread { grain: 12, seed: 4 }
}

strukt_field: () -> i64 {
    let bread = struct_definition();
    
    bread.seed
}

variable: () -> Bread {
    let bread = struct_definition();
    
    bread
}

procedure: () -> Bread {
    struct_definition()
}

// ------------ Assignment Statements ------------
//
// ```
// <var> [+]= <expr>;
// ```
//

assign: () -> i32 {
    let x = 10;
    
    x = 4;
    
    x
}

var_2_var: () -> i32 {
    let x = assign();
    let y: i32 = x;
    
    let bread = Bread { // grain: assign(),
        grain: 12, seed: 4 };
    let other = bread;
    
    other.grain + y
}

struct_field: () -> i64 {
    let bread = Bread { grain: 12, seed: 4 };
    
    bread.seed = 29;
    
    bread.seed
}

conjugate: () -> i32 {
    let x = 68;
    
    // x = x + 1
    x += 1;
    
    x
}

// ------------ Function Parameters ------------

add: (x: i32, y: i32) -> i32 {
    x + y
}

multiply: (x: i32, y: i32) -> i32 {
    x * y
}

double: (x: i32) -> i32 {
    multiply(add(1, 1), x)
}

extract_grain: (bread: Bread) -> i32 {
    bread.grain
}

grain: () -> i32 {
    extract_grain(Bread { grain: double(5), seed: 42 })
}

extract_seed: (bread: Bread) -> i64 {
    bread.seed
}

seed: () -> i64 {
    extract_seed(Bread { grain: double(5), seed: 42 })
}

// ------------ Control Flow ------------

simple_if_then: (condition: bool, x: i32) -> i32 {
    if condition == false { x } else {
        let some = x - 2;
        some
    }
}

// ------------ Floats ------------

Vec2: struct {
    x: f32,
    y: f32,
}

simple_float: () -> f32 {
    let pos = Vec2 { x: 0.4, y: 0.7 };
    assert(pos.x == 0.4);
    pos.y * 2.
}

// ------------ Loops ------------

simple_for: () {
    // println("hard coded:");
    
    let start = 0;
    let end = 10;
    let _it = start;
    let i = _it;
    loop {
        // exit condition
        if _it == end { break; }
        i = _it;
        
        // for block
        // {
        // println("%", i);
        // }
        
        // post op
        _it += 1;
    }
    
    // println("builtin:");
    
    let x = [true, false, false, true, false, true, true];
    let y = &x;
    let val = x[0];
    
    for b in x {}
    
    let ints = [12, 24, 48];
    
    // println("");
    for int in ints {}
    
    for val in 0..7 {}
    
    for it in 2..10 {}
}

// ------------ Scope ------------

scope: () {
    let other = 4;
    assert(other == 4);
    
    // shadow
    let other = 5;
    assert(other == 5);
    
    if true {
        // shadow
        let other = 10;
        assert(other == 10);
        
        if false { let double = 1; }
    }
    
    assert(other == 5);
}

// ------------ Misc ------------

arr_ref_deref: () -> bool {
    let result = true;
    
    let arr: [u8; 3] = [0, 1, 2];
    let ref_arr = [&arr[0], &arr[1], &arr[2]];
    let deref_arr = [arr[0], arr[1], arr[2]];
    
    for i in 0..3 {
        if arr[i] != deref_arr[i] {
            println("invalid deref_arr");
            result = false;
        }
        
        if arr[i] != ref_arr[i]* {
            println("invalid ref_arr deref");
            result = false;
        }
    }
    
    let slice: &[u8] = &arr;
    // let cannot_return: [u8; 3] = slice*;
    for i in 0..3 {
        if slice[i] != arr[i] {
            println("invalid slice indexing");
            result = false;
        }
        slice[i] += 5;
    }
    
    let i = 0;
    for val in slice {
        if val* != arr[i] {
            println("invalid slice iteration");
            result = false;
        }
        i += 1;
    }
    
    // shadow `arr`, but refer to previous `arr` in assignment
    //
    // let var = 10;
    // let var = returns_different_type(var) + 2;
    //     ^^^                          ^^^
    //      |                           make sure this type isn't grabbed from here
    //      |                                                                   |
    //      |-------------------------------------------------------------------|
    
    let arr = [&arr[0], &arr[1], &arr[2]];
    let i = 0;
    for a in arr {
        if deref_arr[i] + 5 != a** {
            println("invalid double deref");
            result = false;
        }
        i += 1;
    }
    
    result
}

cast_clobber: () -> bool {
    let small: u16 = 0x1111;
    let _ = fill_reg();
    let clobbered: u32 = small as u32;
    clobbered != 0x44440000 | small as u32
}

fill_reg: () -> u32 {
    0x44440000
}

bitwise_ops: () -> bool {
    let ops = [
        0b1100 & 0b0011 == 0,
        0b1100 & 0b1111 == 0b1100,
        0b1100 | 0b0011 == 0b1111,
        0b1100 | 0b1111 == 0b1111,
        0b0001 << 1 == 0b0010,
        0b0100 << 1 == 0b1000,
        0b0011 << 2 == 0b1100,
        0b1000 >> 1 == 0b0100,
        0b0010 >> 1 == 0b0001,
        0b1100 >> 2 == 0b0011,
    ];
    
    for op in ops {
        if !op* { return false; }
    }
    
    true
}

// ------------ Util ------------

I: const u32 = 0;

test: (condition: bool) {
    print("Test % .................... ", I);
    if condition { println("Ok"); } else { println("Fail"); }
    
    I += 1;
}
