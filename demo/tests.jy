main: () -> i32 {
    assert(double(2) == 4);
    assert(double(4) == 8);
    assert(double(28) == 56);
    assert(seed() == 42);
    assert(var_2_var() == 16);
    assert(simple_if_then(true, 4) == 2);
    assert(24 == 24);
    assert(simple_float() == 0.7 * 2.);
    // TODO: I don't know why this fails and the previous works
    // assert(0.7 * 2. == 0.7 * 2.);
    0
}

// ------------ Structs ------------

// size: 24, alignment: 8
Sandwich: struct {
    /*
    * Structs have C style representation, with
    * garaunteed ordering.
    */
    bread: Bread,     // size:    16, alignment: 8
    butter: u8,       // size:    1, alignment: 1
    // lettuce: Lettuce,
                      // padding: 6
}


// size: 16, alignment: 8
Bread: struct {
    grain: i32, // size:     4, alignment: 4
                // padding:  4
    seed: i64,  // size:     8, alignment: 8
}

// Recursive structs have infinite size!
/*
* Cheese: struct {
*     tomato: Tomato,
* }
*
* Tomato: struct {
*     girth: i32,
*     cheese: Cheese,
* }
*/

// TODO:
// // size: 1, alignment: 1
// Lettuce: enum {
//     Crisp, // 0
//     Soggy, // 1
// }

// ------------ Return Statements ------------
//
// ```
// return [<expr>];
// ```
//
// ```
// some_block: i32 {
//     <expr: i32>
// }
// ```

return_statement: () -> i64 {
    return 42;
}

int_lit: () -> i32 {
    12
}

bin_op: () -> i32 {
    int_lit() + 4
}

struct_definition: () -> Bread {
    Bread {
        grain: 12,
        seed: 4,
    }
}

strukt_field: () -> i64 {
    let bread = struct_definition();

    bread.seed
}

variable: () -> Bread {
    let bread = struct_definition();

    bread
}

procedure: () -> Bread {
    struct_definition()
}

// ------------ Assignment Statements ------------
//
// ```
// <var> [+]= <expr>;
// ```
//

assign: () -> i32 {
    let x = 10;

    x = 4;

    x
}

var_2_var: () -> i32 {
    let x = assign();
    let y: i32 = x;

    let bread = Bread {
        // grain: assign(),
        grain: 12,
        seed: 4,
    };
    let other = bread;

    other.grain + y // 16
}

struct_field: () -> i64 {
    let bread = Bread {
        grain: 12,
        seed: 4,
    };

    bread.seed = 29;

    bread.seed
}

conjugate: () -> i32 {
    let x = 68;

    // x = x + 1
    x += 1;

    x
}

// ------------ Function Parameters ------------

add: (x: i32, y: i32) -> i32 {
    x + y
}

multiply: (x: i32, y: i32) -> i32 {
    x * y
}

double: (x: i32) -> i32 {
    multiply(add(1, 1), x)
}

extract_grain: (bread: Bread) -> i32 {
    bread.grain
}

grain: () -> i32 {
    extract_grain(Bread {
        grain: double(5),
        seed: 42,
    })
}

extract_seed: (bread: Bread) -> i64 {
    bread.seed
}

seed: () -> i64 {
    extract_seed(Bread {
        grain: double(5),
        seed: 42,
    })
}

// ------------ Control Flow ------------

simple_if_then: (condition: bool, x: i32) -> i32 {
    if condition == false {
        x
    } else {
        let y = x - 2;
        y
    }
}

// ------------ Floats ------------

Vec2: struct {
    x: f32,
    y: f32,
}

simple_float: () -> f32 {
    let pos = Vec2 { x: 0.4, y: 0.7 };
    assert(pos.x == 0.4);
    pos.y * 2.
}

// ------------ Util ------------

assert: (condition: bool) {
    if !condition {
        printf("failed assert\n");
        exit(1);
    }
}

#[intrinsic]
exit: (code: i32) {}

#[intrinsic]
printf: (fmt: &str) {}
