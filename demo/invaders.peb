use core::basic;
use core::intrinsics;

use import;

#[link("demo/SDL3")]
extern("C") {
    SDL_Init: (init_code: u32) -> bool;
    SDL_CreateWindow: (title: CStr, width: i32, height: i32, flags: u64) -> &Window;
    
    SDL_CreateRenderer: (window: &Window, name: CStr) -> &Renderer;
    SDL_RenderClear: (renderer: &Renderer) -> bool;
    SDL_RenderPresent: (renderer: &Renderer) -> bool;
    
    SDL_LoadBMP: (file: CStr) -> &Surface;
    SDL_DestroySurface: (surface: &Surface);
    SDL_CreateTextureFromSurface: (renderer: &Renderer, surface: &Surface) -> &Texture;
    SDL_RenderTexture: (
        renderer: &Renderer, texture: &Texture, srcrect: &FRect, dstrect: &FRect
    ) -> bool;
    
    SDL_PollEvent: (event: &KeyboardEvent) -> bool;
    SDL_Delay: (ms: u32);
    SDL_GetError: () -> CStr;
}

Window: struct {
    id: u32,
    title: &u8,
}

Renderer: struct {
    id: u32,
}

Event: struct {
    event_type: u32,
    padding: [u8; 124],
}

KeyboardEvent: struct {
    event_type: u32,
    reserved: u32,
    timestamp: u64,
    window_id: u32,
    keyboard_id: u32,
    scancode: u32,
    key: u32,
    keymod: u16,
    raw: u16,
    down: bool,
    repeat: bool,
    
    padding: [u8; 88],
}

new_keyboard_event: () -> KeyboardEvent {
    KeyboardEvent {
        event_type: 0,
        reserved: 0,
        timestamp: 0,
        window_id: 0,
        keyboard_id: 0,
        scancode: 0,
        key: 0,
        keymod: 0,
        raw: 0,
        down: false,
        repeat: false,
        
        padding: [0; 88],
    }
}

Surface: struct {
    flags: u32,
    format: i32,
    width: i32,
    height: i32,
    pitch: i32,
    pixels: &u32,
}

Texture: struct {
    format: i32,
    width: i32,
    height: i32,
}

FRect: struct {
    x: f32,
    y: f32,
    w: f32,
    h: f32,
}

NULL: const u64 = 0;
SDL_INIT_VIDEO: const u32 = 0x020;
SDL_QUIT: const u32 = 0x100;
SDL_KEY_DOWN: const u32 = 0x300;
SDL_KEY_UP: const u32 = 0x301;

SDLK_A: const u32 = 0x00000061;
SDLK_S: const u32 = 0x00000073;
SDLK_D: const u32 = 0x00000064;
SDLK_W: const u32 = 0x00000077;
SDLK_N: const u32 = 0x0000006e;
SDLK_ESC: const u32 = 0x0000001b;
SDLK_SPACE: const u32 = 0x00000020;

WIDTH: const i32 = 900;
HEIGHT: const i32 = 600;
DELAY_MS: const u32 = 16;

Vec2: struct {
    x: f32,
    y: f32,
}

// impl Vec2 {
//     length_squared: (self) -> f32 {
//         (self.x * self.x) + (self.y * self.y)
//     }
//
//     length: (self) -> f32 {
//         sqrt_f32(self.length_squared())
//     }
// }

DOWN: const u64 = 0;
UP: const u64 = 1;
RIGHT: const u64 = 2;
LEFT: const u64 = 3;

Bullet: struct {
    pos: Vec2,
    tick: u32,
    alive: bool,
}

new_bullet: () -> Bullet {
    Bullet { pos: Vec2 { x: 0., y: 0. }, tick: 0, alive: false }
}

NUM_BULLETS: const u32 = 5;

GameState: struct {
    event: KeyboardEvent,
    
    move_dir: [bool; 4],
    player_pos: Vec2,
    
    textures: [&Texture; 3],
    index: u64,
    selected_texture: &Texture,
    
    bindex: u32,
    bullets: [Bullet; 5],
}

main: () -> i32 {
    printf("imported: %\n", imported_func());
    
    if !SDL_Init(SDL_INIT_VIDEO) {
        report_error("failed to init SDL\n");
        return 1;
    }
    
    let window = SDL_CreateWindow(cs("Invaders\0"), WIDTH, HEIGHT, 0);
    if window as u64 == NULL {
        report_error("failed to create window\n");
        return 1;
    }
    
    let renderer = SDL_CreateRenderer(window, empty_cs());
    if renderer as u64 == NULL {
        report_error("failed to create renderer\n");
        return 1;
    }
    
    let state = startup(renderer);
    loop {
        if handle_input(&state) == SDL_QUIT { break; }
        update(&state);
        render(renderer, &state);
    }
    
    printf("exiting invaders\n");
    0
}

startup: (renderer: &Renderer) -> GameState {
    let textures = [
        load_bmp_texture(cs("./demo/bebop.bmp\0"), renderer),
        load_bmp_texture(cs("./demo/guts.bmp\0"), renderer),
        load_bmp_texture(cs("./demo/bullet.bmp\0"), renderer),
    ];
    
    for texture in textures{
        if texture* as u64 == NULL { exit(1); }
    }
    
    GameState {
        event: new_keyboard_event(),
        
        move_dir: [false, false, false, false],
        player_pos: Vec2 { x: 900. / 2., y: 400. },
        
        textures: textures,
        index: 0,
        selected_texture: textures[0],
        
        bindex: 0,
        bullets: [new_bullet(); 5],
    }
}

handle_input: (state: &GameState) -> u32 {
    loop {
        if !SDL_PollEvent(&state*.event) { break; }
        
        if state*.event.event_type == SDL_QUIT { return SDL_QUIT; }
        
        if state*.event.event_type == SDL_KEY_DOWN {
            if state*.event.key == SDLK_ESC { return SDL_QUIT; }
            
            if state*.event.key == SDLK_S { state*.move_dir[DOWN] = true; }
            if state*.event.key == SDLK_W { state*.move_dir[UP] = true; }
            if state*.event.key == SDLK_D { state*.move_dir[RIGHT] = true; }
            if state*.event.key == SDLK_A { state*.move_dir[LEFT] = true; }
            
            if state*.event.key == SDLK_SPACE {
                let bullet = &state*.bullets[state*.bindex as u64];
                bullet*.alive = true;
                bullet*.pos = state*.player_pos;
                
                state*.bindex += 1;
                if state*.bindex >= NUM_BULLETS { state*.bindex = 0; }
            }
            
            // flip texture
            if state*.event.key == SDLK_N {
                state*.index = state*.index ^ 1;
                state*.selected_texture = state*.textures[state*.index];
            }
        }
        
        if state*.event.event_type == SDL_KEY_UP {
            if state*.event.key == SDLK_S { state*.move_dir[DOWN] = false; }
            if state*.event.key == SDLK_W { state*.move_dir[UP] = false; }
            if state*.event.key == SDLK_D { state*.move_dir[RIGHT] = false; }
            if state*.event.key == SDLK_A { state*.move_dir[LEFT] = false; }
        }
    }
    
    0
}

SPEED: const f32 = 12.;
BULLET_SPEED: const f32 = 17.;

update: (state: &GameState) {
    let mov_vec = Vec2 { x: 0., y: 0. };
    if state*.move_dir[DOWN] { mov_vec.y += 1.; }
    if state*.move_dir[UP] { mov_vec.y -= 1.; }
    if state*.move_dir[RIGHT] { mov_vec.x += 1.; }
    if state*.move_dir[LEFT] { mov_vec.x -= 1.; }
    
    // let length = pos.length();
    let length = sqrt_f32(mov_vec.x * mov_vec.x + mov_vec.y * mov_vec.y);
    if length != 0. {
        let norm = SPEED / length;
        state*.player_pos.x += mov_vec.x * norm;
        state*.player_pos.y += mov_vec.y * norm;
    }
    
    for bullet in state*.bullets{
        if bullet*.alive {
            bullet*.pos.y -= BULLET_SPEED;
            
            if bullet*.pos.y < 0. { bullet*.alive = false; }
        }
    }
}

render: (renderer: &Renderer, state: &GameState) {
    if !SDL_RenderClear(renderer) {
        report_error("failed to render clear\n");
        exit(1);
    }
    
    let dst = FRect { x: 0., y: 0., w: 100., h: 100. };
    
    for bullet in state*.bullets{
        if bullet*.alive {
            dst.x = bullet*.pos.x;
            dst.y = bullet*.pos.y;
            draw_texture(renderer, state*.textures[2], &dst);
        }
    }
    
    dst.x = state*.player_pos.x;
    dst.y = state*.player_pos.y;
    draw_texture(renderer, state*.selected_texture, &dst);
    
    if !SDL_RenderPresent(renderer) {
        report_error("failed to render\n");
        exit(1);
    }
    SDL_Delay(DELAY_MS);
}

draw_texture: (renderer: &Renderer, texture: &Texture, dst: &FRect) {
    if !SDL_RenderTexture(renderer, texture, NULL, dst) {
        report_error("failed to render texture\n");
        exit(1);
    }
}

load_bmp_texture: (path: CStr, renderer: &Renderer) -> &Texture {
    let bmp = SDL_LoadBMP(path);
    if bmp as u64 == NULL {
        report_error("failed to load bmp\n");
        return NULL as &Texture;
    }
    let texture = SDL_CreateTextureFromSurface(renderer, bmp);
    if texture as u64 == NULL {
        report_error("failed to create bmp texture\n");
        return NULL as &Texture;
    }
    SDL_DestroySurface(bmp);
    texture
}

report_error: (msg: &str) {
    printf(msg);
    print_cs(SDL_GetError());
}
