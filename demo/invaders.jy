// ------------ FFI ------------

#[link("demo/SDL3")]
extern("C") {
    SDL_Init: (init_code: u32) -> bool;
    SDL_CreateWindow: (title: CStr, width: i32, height: i32, flags: u64) -> &Window;

    SDL_CreateRenderer: (window: &Window, name: CStr) -> &Renderer;
    SDL_RenderClear: (renderer: &Renderer) -> bool;
    SDL_RenderPresent: (renderer: &Renderer) -> bool;

    SDL_LoadBMP: (file: CStr) -> &Surface;
    SDL_DestroySurface: (surface: &Surface);
    SDL_CreateTextureFromSurface: (renderer: &Renderer, surface: &Surface) -> &Texture;
    SDL_RenderTexture: (renderer: &Renderer, texture: &Texture, srcrect: &FRect, dstrect: &FRect) -> bool;

    SDL_PollEvent: (event: &Event) -> bool;
    SDL_Delay: (ms: u32);
    SDL_GetError: () -> CStr;
}

CStr: struct {
    str: &u8
}

// ------------ Demo ------------

Window: struct {
    id: u32,
    title: &u8,
}

Renderer: struct {
    id: u32,
}

Event: struct {
    event_type: u32,
    d1: u32,
    d2: u64,
    d3: u64,
    d4: u64,

    b0: DummyBlock,
    b1: DummyBlock,
}

DummyBlock: struct {
    d0: u64,
    d1: u64,
    d2: u64,
    d3: u64,
}

Surface: struct {
    flags: u32,
    format: i32,
    width: i32,
    height: i32,
    pitch: i32,
    pixels: &u32,

    // .. incomplete!
}

Texture: struct {
    format: i32,
    width: i32,
    height: i32,

    // .. incomplete!
}

FRect: struct {
    dummy: u32

    // .. incomplete!
}

NULL           : const u64 = 0;
SDL_INIT_VIDEO : const u32 = 0x020;
SDL_QUIT       : const u32 = 0x100;
SDL_KEY_DOWN   : const u32 = 0x300;

SDLK_A         : const u32 = 0x00000061;

XForm: struct {
    trans: Vec2,
    scale: Vec2,
    rotation: f32,
}

Vec2: struct {
    x: f32,
    y: f32,
}

main: () -> i32 {
    assert(SDL_Init(SDL_INIT_VIDEO));
    let window = SDL_CreateWindow(cs("Invaders\0"), 640, 380, 0);
    if window == 0 {
        report_error("failed to create window\n");
        return 1;
    }

    let renderer = SDL_CreateRenderer(window, empty_cs());
    if renderer == 0 {
        report_error("failed to create renderer\n");
        return 1;
    }

    let bmp = SDL_LoadBMP(cs("./demo/bebop.bmp\0"));
    if bmp == 0 {
        report_error("failed to create bebop\n");
        return 1;
    }
    let texture = SDL_CreateTextureFromSurface(renderer, bmp);
    if texture == 0 {
        report_error("failed to create bebop texture\n");
        return 1;
    }
    SDL_DestroySurface(bmp);

    let pos = Vec2 { x: 0., y: 0. };

    let event = Event {};
    loop {
        if SDL_PollEvent(&event) {
            if event.event_type == SDL_QUIT {
                return 0;
            }

            if event.event_type == SDL_KEY_DOWN {
                return 0;
            }
        }

        if SDL_RenderClear(renderer)   {} else { return 1; }
        if SDL_RenderTexture(renderer,
                            texture,
                            NULL,
                            NULL)      {} else { return 1; }
        if SDL_RenderPresent(renderer) {} else { return 1; }
        SDL_Delay(16);
    }
}

report_error: (msg: &str) {
    printf(msg);
    // TODO: struct return doesn't seem to work
    print_cs(SDL_GetError());
}

#[intrinsic]
exit: (code: i32) {}

#[intrinsic]
printf: (fmt: &str) {}

#[intrinsic]
print_cs: (str: CStr) {}

#[intrinsic]
cs: (str: &str) -> CStr {}

empty_cs: () -> CStr {
    CStr {
        str: NULL
    }
}

assert: (condition: bool) {
    if condition == false {
        exit(1);
    }
}
