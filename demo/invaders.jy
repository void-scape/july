// ------------ FFI ------------

#[link("demo/SDL3")]
extern("C") {
    SDL_Init: (init_code: u32) -> bool;
    SDL_CreateWindow: (title: CStr, width: i32, height: i32, flags: u64) -> &Window;

    SDL_CreateRenderer: (window: &Window, name: CStr) -> &Renderer;
    SDL_RenderClear: (renderer: &Renderer) -> bool;
    SDL_RenderPresent: (renderer: &Renderer) -> bool;

    SDL_LoadBMP: (file: CStr) -> &Surface;
    SDL_DestroySurface: (surface: &Surface);
    SDL_CreateTextureFromSurface: (renderer: &Renderer, surface: &Surface) -> &Texture;
    SDL_RenderTexture: (renderer: &Renderer, texture: &Texture, srcrect: &FRect, dstrect: &FRect) -> bool;

    SDL_PollEvent: (event: &KeyboardEvent) -> bool;
    SDL_Delay: (ms: u32);
    SDL_GetError: () -> CStr;
}

CStr: struct {
    str: &u8
}

// ------------ Demo ------------

Window: struct {
    id: u32,
    title: &u8,
}

Renderer: struct {
    id: u32,
}

Event: struct {
    event_type: u32,
    padding: [124] u8,
}

KeyboardEvent: struct {
    event_type: u32,        /**< SDL_EVENT_KEY_DOWN or SDL_EVENT_KEY_UP */
    reserved: u32,
    timestamp: u64,         /**< In nanoseconds, populated using SDL_GetTicksNS() */
    window_id: u32,         /**< The window with keyboard focus, if any */
    keyboard_id: u32,       /**< The keyboard instance id, or 0 if unknown or virtual */
    scancode: u32,          /**< SDL physical key code */
    key: u32,               /**< SDL virtual key code */
    keymod: u16,            /**< current key modifiers */
    raw: u16,               /**< The platform dependent scancode for this event */
    down: bool,             /**< true if the key is pressed */
    repeat: bool,           /**< true if this is a key repeat */

    padding: [88] u8,
}

Surface: struct {
    flags: u32,
    format: i32,
    width: i32,
    height: i32,
    pitch: i32,
    pixels: &u32,

    // .. incomplete!
}

Texture: struct {
    format: i32,
    width: i32,
    height: i32,

    // .. incomplete!
}

FRect: struct {
    x: f32,
    y: f32,
    w: f32,
    h: f32,
}

NULL           : const u64 = 0;
SDL_INIT_VIDEO : const u32 = 0x020;
SDL_QUIT       : const u32 = 0x100;
SDL_KEY_DOWN   : const u32 = 0x300;

SDLK_A         : const u32 = 0x00000061;
SDLK_S         : const u32 = 0x00000073;
SDLK_D         : const u32 = 0x00000064;
SDLK_W         : const u32 = 0x00000077;
SDLK_ESC       : const u32 = 0x0000001b;

WIDTH          : const i32 = 640;
HEIGHT         : const i32 = 380;
DELAY_MS       : const u32 = 16;

XForm: struct {
    trans: Vec2,
    scale: Vec2,
    rotation: f32,
}

Vec2: struct {
    x: f32,
    y: f32,
}

main: () -> i32 {
    if !SDL_Init(SDL_INIT_VIDEO) {
        report_error("failed to init SDL\n");
        return 1;
    }

    let window = SDL_CreateWindow(cs("Invaders\0"), WIDTH, HEIGHT, 0);
    if window == NULL {
        report_error("failed to create window\n");
        return 1;
    }

    let renderer = SDL_CreateRenderer(window, empty_cs());
    if renderer == NULL {
        report_error("failed to create renderer\n");
        return 1;
    }

    let texture = load_bmp_texture(cs("./demo/bebop.bmp\0"), renderer);
    if texture == NULL {
        return 1;
    }
    // let textures = [&Texture; 2];
    // textures[0] = bebop;

    let pos = Vec2 { x: 0., y: 0. };
    let event = KeyboardEvent {};
    loop {
        if SDL_PollEvent(&event) {
            if event.event_type == SDL_QUIT {
                return 0;
            }

            if event.event_type == SDL_KEY_DOWN {
                if event.key == SDLK_ESC {
                    return 0;
                }

                if event.key == SDLK_S {
                    pos.y += 1.;
                }

                if event.key == SDLK_D {
                    pos.x += 1.;
                }

                if event.key == SDLK_W {
                    pos.y -= 1.;
                }

                if event.key == SDLK_A {
                    pos.x -= 1.;
                }
            }
        }

        let dst = FRect { x: pos.x, y: pos.y, w: 100., h: 100. };
        if !SDL_RenderClear(renderer)   { return 1; }
        if !SDL_RenderTexture(renderer,
                              texture,
                              NULL,
                              &dst)     { return 1; }
        if !SDL_RenderPresent(renderer) { return 1; }
        SDL_Delay(DELAY_MS);
    }
}

load_bmp_texture: (path: CStr, renderer: &Renderer) -> &Texture {
    let bmp = SDL_LoadBMP(path);
    if bmp == NULL {
        report_error("failed to load bmp\n");
        return NULL;
    }
    let texture = SDL_CreateTextureFromSurface(renderer, bmp);
    if texture == NULL {
        report_error("failed to create bmp texture\n");
        return NULL;
    }
    SDL_DestroySurface(bmp);
    texture
}

report_error: (msg: &str) {
    printf(msg);
    print_cs(SDL_GetError());
}

empty_cs: () -> CStr {
    CStr {
        str: NULL
    }
}

assert: (condition: bool) {
    if !condition {
        printf("failed assert\n");
        exit(1);
    }
}

#[intrinsic]
exit: (code: i32) {}

#[intrinsic]
printf: (fmt: &str) {}

#[intrinsic]
print_cs: (str: CStr) {}

#[intrinsic]
cs: (str: &str) -> CStr {}
