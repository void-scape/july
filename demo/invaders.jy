// ------------ FFI ------------

#[link("demo/SDL3")]
extern("C") {
    SDL_Init: (init_code: u32) -> bool;
    SDL_CreateWindow: (title: CStr, width: i32, height: i32, flags: u64) -> &Window;

    SDL_CreateRenderer: (window: &Window, name: CStr) -> &Renderer;
    SDL_RenderClear: (renderer: &Renderer) -> bool;
    SDL_RenderPresent: (renderer: &Renderer) -> bool;

    SDL_LoadBMP: (file: CStr) -> &Surface;
    SDL_DestroySurface: (surface: &Surface);
    SDL_CreateTextureFromSurface: (renderer: &Renderer, surface: &Surface) -> &Texture;
    SDL_RenderTexture: (renderer: &Renderer, texture: &Texture, srcrect: &FRect, dstrect: &FRect) -> bool;

    SDL_PollEvent: (event: &KeyboardEvent) -> bool;
    SDL_Delay: (ms: u32);
    SDL_GetError: () -> CStr;
}

CStr: struct {
    str: &u8
}

// ------------ Demo ------------

Window: struct {
    id: u32,
    title: &u8,
}

Renderer: struct {
    id: u32,
}

Event: struct {
    event_type: u32,
    padding: [124] u8,
}

KeyboardEvent: struct {
    event_type: u32,        /**< SDL_EVENT_KEY_DOWN or SDL_EVENT_KEY_UP */
    reserved: u32,
    timestamp: u64,         /**< In nanoseconds, populated using SDL_GetTicksNS() */
    window_id: u32,         /**< The window with keyboard focus, if any */
    keyboard_id: u32,       /**< The keyboard instance id, or 0 if unknown or virtual */
    scancode: u32,          /**< SDL physical key code */
    key: u32,               /**< SDL virtual key code */
    keymod: u16,            /**< current key modifiers */
    raw: u16,               /**< The platform dependent scancode for this event */
    down: bool,             /**< true if the key is pressed */
    repeat: bool,           /**< true if this is a key repeat */

    padding: [88] u8,
}

new_keyboard_event: () -> KeyboardEvent {
    KeyboardEvent {
        event_type: 0,
        reserved: 0,
        timestamp: 0,
        window_id: 0,
        keyboard_id: 0,
        scancode: 0,
        key: 0,
        keymod: 0,
        raw: 0,
        down: false,
        repeat: false,

        padding: [0; 88]
    }
}

Surface: struct {
    flags: u32,
    format: i32,
    width: i32,
    height: i32,
    pitch: i32,
    pixels: &u32,

    // .. incomplete!
}

Texture: struct {
    format: i32,
    width: i32,
    height: i32,

    // .. incomplete!
}

FRect: struct {
    x: f32,
    y: f32,
    w: f32,
    h: f32,
}

NULL           : const u64 = 0;
SDL_INIT_VIDEO : const u32 = 0x020;
SDL_QUIT       : const u32 = 0x100;
SDL_KEY_DOWN   : const u32 = 0x300;
SDL_KEY_UP     : const u32 = 0x301;

SDLK_A         : const u32 = 0x00000061;
SDLK_S         : const u32 = 0x00000073;
SDLK_D         : const u32 = 0x00000064;
SDLK_W         : const u32 = 0x00000077;
SDLK_N         : const u32 = 0x0000006e;
SDLK_ESC       : const u32 = 0x0000001b;
SDLK_SPACE     : const u32 = 0x00000020;

WIDTH          : const i32 = 900;
HEIGHT         : const i32 = 600;
DELAY_MS       : const u32 = 16;

SPEED          : const f32 = 12.;

Vec2: struct {
    x: f32,
    y: f32,
}

// impl Vec2 {
//     length_squared: (self) -> f32 {
//         (self.x * self.x) + (self.y * self.y)
//     }
//
//     length: (self) -> f32 {
//         sqrt_f32(self.length_squared())
//     }
// }

DOWN  : const u64 = 0;
UP    : const u64 = 1;
RIGHT : const u64 = 2;
LEFT  : const u64 = 3;

Bullet: struct {
    pos: Vec2,
    tick: u32,
    alive: bool,
}

new_bullet: () -> Bullet {
    Bullet {
        pos: Vec2 { x: 0., y: 0. },
        tick: 0,
        alive: false,
    }
}

NUM_BULLETS : const u32 = 5;
BULLET_SPEED: const f32 = 15.;

main: () -> i32 {
    if !SDL_Init(SDL_INIT_VIDEO) {
        report_error("failed to init SDL\n");
        return 1;
    }

    let window = SDL_CreateWindow(cs("Invaders\0"), WIDTH, HEIGHT, 0);
    if window as u64 == NULL {
        report_error("failed to create window\n");
        return 1;
    }

    let renderer = SDL_CreateRenderer(window, empty_cs());
    if renderer as u64 == NULL {
        report_error("failed to create renderer\n");
        return 1;
    }

    let bebop = load_bmp_texture(cs("./demo/bebop.bmp\0"), renderer);
    if bebop as u64 == NULL {
        return 1;
    }
    let guts = load_bmp_texture(cs("./demo/guts.bmp\0"), renderer);
    if guts as u64 == NULL {
        return 1;
    }

    let textures = [bebop, guts];
    let index: u64 = 0;
    let selected_texture = textures[index];

    let bullet_bmp = load_bmp_texture(cs("./demo/bullet.bmp\0"), renderer);
    if bullet_bmp as u64 == NULL {
        return 1;
    }

    let bindex = 0;
    let bullets = [new_bullet(); 5];

    let move_dir = [false, false, false, false];
    let pos = Vec2 { x: 900. / 2., y: 400. };
    let event = new_keyboard_event();

    loop {
        // input
        if SDL_PollEvent(&event) {
            if event.event_type == SDL_QUIT {
                return 0;
            }

            if event.event_type == SDL_KEY_DOWN {
                if event.key == SDLK_ESC { break; }

                if event.key == SDLK_S { move_dir[DOWN]  = true; }
                if event.key == SDLK_W { move_dir[UP]    = true; }
                if event.key == SDLK_D { move_dir[RIGHT] = true; }
                if event.key == SDLK_A { move_dir[LEFT]  = true; }

                if event.key == SDLK_SPACE {
                    let x = 0;
                    for bullet in bullets {
                        if x == bindex {
                            bullet*.alive = true;
                            bullet*.pos = pos;
                        }
                        x += 1;
                    }

                    bindex += 1;
                    if bindex == NUM_BULLETS {
                        bindex = 0;
                    }
                }

                // flip texture
                if event.key == SDLK_N {
                    index = index ^ 1;
                    selected_texture = textures[index];
                }
            }

            if event.event_type == SDL_KEY_UP {
                if event.key == SDLK_S { move_dir[DOWN]  = false; }
                if event.key == SDLK_W { move_dir[UP]    = false; }
                if event.key == SDLK_D { move_dir[RIGHT] = false; }
                if event.key == SDLK_A { move_dir[LEFT]  = false; }
            }
        }

        // update
        let mov_vec = Vec2 { x: 0., y: 0. };
        if move_dir[DOWN]  { mov_vec.y += 1.; }
        if move_dir[UP]    { mov_vec.y -= 1.; }
        if move_dir[RIGHT] { mov_vec.x += 1.; }
        if move_dir[LEFT]  { mov_vec.x -= 1.; }

        // let length = pos.length();
        let length = sqrt_f32(mov_vec.x * mov_vec.x + mov_vec.y * mov_vec.y);
        if length != 0. {
            let norm = SPEED / length;
            pos.x += mov_vec.x * norm;
            pos.y += mov_vec.y * norm;
        }

        for bullet in bullets {
            if bullet*.alive {
                bullet*.pos.y -= BULLET_SPEED;

                if bullet*.pos.y < 0.  {
                    bullet*.alive = false;
                }
            }
        }

        // render
        if !SDL_RenderClear(renderer) {
            report_error("failed to render clear\n");
            return 1;
        }

        let dst = FRect { x: 0., y: 0., w: 100., h: 100. };

        for bullet in bullets {
            if bullet*.alive {
                dst.x = bullet*.pos.x;
                dst.y = bullet*.pos.y;
                draw_texture(renderer, bullet_bmp, &dst);
            }
        }

        dst.x = pos.x;
        dst.y = pos.y;
        draw_texture(renderer, selected_texture, &dst);

        if !SDL_RenderPresent(renderer) {
            report_error("failed to render\n");
            return 1;
        }
        SDL_Delay(DELAY_MS);
    }

    printf("exiting invaders\n");
    0
}

draw_texture: (renderer: &Renderer, texture: &Texture, dst: &FRect) -> bool {
    if !SDL_RenderTexture(renderer,
                          texture,
                          NULL,
                          dst) {
        report_error("failed to render texture\n");
        return false;
    }

    true
}

load_bmp_texture: (path: CStr, renderer: &Renderer) -> &Texture {
    let bmp = SDL_LoadBMP(path);
    if bmp as u64 == NULL {
        report_error("failed to load bmp\n");
        return NULL as &Texture;
    }
    let texture = SDL_CreateTextureFromSurface(renderer, bmp);
    if texture as u64 == NULL {
        report_error("failed to create bmp texture\n");
        return NULL as &Texture;
    }
    SDL_DestroySurface(bmp);
    texture
}

report_error: (msg: &str) {
    printf(msg);
    print_cs(SDL_GetError());
}

empty_cs: () -> CStr {
    CStr {
        str: NULL as &u8
    }
}

assert: (condition: bool) {
    if !condition {
        printf("failed assert\n");
        exit(1);
    }
}

#[intrinsic]
exit: (code: i32) {}

#[intrinsic]
printf: (fmt: &str) {}

#[intrinsic]
print_cs: (str: CStr) {}

#[intrinsic]
cs: (str: &str) -> CStr {}

#[intrinsic]
sqrt_f32: (f: f32) -> f32 {}

