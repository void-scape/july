// ------------ Structs ------------

// size: 24, alignment: 8
Sandwich: struct {
    /*
    * Structs have C style representation, with
    * garaunteed ordering.
    */
    bread: Bread,     // size:    16, alignment: 8
    butter: u8,       // size:    1, alignment: 1
    // lettuce: Lettuce,
                      // padding: 6
}


// size: 16, alignment: 8
Bread: struct {
    grain: i32, // size:     4, alignment: 4
                // padding:  4
    seed: i64,  // size:     8, alignment: 8
}

// Recursive structs have infinite size!
/*
* Cheese: struct {
*     tomato: Tomato,
* }
*
* Tomato: struct {
*     girth: i32,
*     cheese: Cheese,
* }
*/

// TODO:
// // size: 1, alignment: 1
// Lettuce: enum {
//     Crisp, // 0
//     Soggy, // 1
// }

// ------------ Return Statements ------------
//
// ```
// return [<expr>];
// ```
//
// ```
// some_block: i32 {
//     <expr: i32>
// }
// ```

return_statement: () -> i64 {
    return 42;
}

int_lit: () -> i32 {
    12
}

bin_op: () -> i32 {
    int_lit() + 4
}

struct_definition: () -> Bread {
    Bread {
        grain: 12,
        seed: 4,
    }
}

strukt_field: () -> i64 {
    let bread = struct_definition();

    bread.seed
}

variable: () -> Bread {
    let bread = struct_definition();

    bread
}

procedure: () -> Bread {
    struct_definition()
}

// ------------ Assignment Statements ------------
//
// ```
// <var> [+]= <expr>;
// ```
//

assign: () -> i32 {
    let x = 10;

    x = 4;

    x
}

var_2_var: () -> i32 {
    let x = assign();
    let y: i32 = x;

    let bread = Bread {
        // grain: assign(),
        grain: 12,
        seed: 4,
    };
    let other = bread;

    other.grain + y // 16
}

struct_field: () -> i64 {
    let bread = Bread {
        grain: 12,
        seed: 4,
    };

    bread.seed = 29;

    bread.seed
}

conjugate: () -> i32 {
    let x = 68;

    // x = x + 1
    x += 1;

    x
}

// ------------ Function Parameters ------------

add: (x: i32, y: i32) -> i32 {
    x + y
}

multiply: (x: i32, y: i32) -> i32 {
    x * y
}

double: (x: i32) -> i32 {
    multiply(add(1, 1), x)
}

extract_grain: (bread: Bread) -> i32 {
    bread.grain
}

grain: () -> i32 {
    extract_grain(Bread {
        grain: double(5),
        seed: 42,
    })
}

extract_seed: (bread: Bread) -> i64 {
    bread.seed
}

seed: () -> i64 {
    extract_seed(Bread {
        grain: double(5),
        seed: 42,
    })
}

// ------------ Control Flow ------------

simple_if_then: (condition: bool, x: i32) -> i32 {
    if condition == false {
        x
    } else {
        let y = x - 2;
        y
    }
}

// ------------ FFI -------

#[link("SDL3")]
extern("C") {
    SDL_Init: (init_code: u32) -> bool;
    SDL_CreateWindow: (title: u64, width: i32, height: i32, flags: u64) -> &Window;

    SDL_CreateRenderer: (window: &Window, name: u64) -> &Renderer;
    SDL_RenderClear: (renderer: &Renderer) -> bool;
    SDL_RenderPresent: (renderer: &Renderer) -> bool;

    SDL_PollEvent: (event: &Event) -> bool;
    SDL_Delay: (ms: u32);
}

// ------------ Demo ------------

Window: struct {
    id: u32,
    title: &u8,
}

Renderer: struct {
    id: u32,
}

Event: struct {
    event_type: u32,
    d1: u32,
    d2: u64,
    d3: u64,
    d4: u64,

    d5: u64,
    d6: u64,
    d7: u64,
    d8: u64,

    d9: u64,
    d10: u64,
    d11: u64,
    d12: u64,

    d13: u64,
    d14: u64,
    d15: u64,
    d16: u64,
}

// SDL_QUIT     : const u32 = 0x100;
// SDL_KEY_DOWN : const u32 = 0x300;

game_loop: () -> i32 {
    assert(SDL_Init(69));
    let window = SDL_CreateWindow(0, 640, 380, 0);
    if window == 0 {
        printf("failed to create window\n");
        return 1;
    }

    let renderer = SDL_CreateRenderer(window, 0);
    if renderer == 0 {
        printf("failed to create renderer\n");
        return 1;
    }

    let event = Event { event_type: 0x100 };
    loop {
        if SDL_PollEvent(&event) {
            if event.event_type == 0x100 {
                return 0;
            }

            if event.event_type == 0x300 {
                return 0;
            }
        }

        if SDL_RenderClear(renderer)   {} else { return 1; }
        if SDL_RenderPresent(renderer) {} else { return 1; }
        SDL_Delay(16);
    }
}

main: () -> i32 {
    tests();
    game_loop()
}

#[intrinsic]
exit: (code: i32) {}

#[intrinsic]
printf: (fmt: &str) {}

assert: (condition: bool) {
    if condition == false {
        exit(1);
    }
}

assert_n: (condition: bool) {
    if condition == true {
        exit(1);
    }
}

tests: () {
    assert(double(2) == 4);
    assert(double(4) == 8);
    assert(double(28) == 56);
    assert(seed() == 42);
    assert(var_2_var() == 16);
    assert(simple_if_then(true, 4) == 2);
    assert(24 == 24);
}
