// Hello, Sailor!
main: () -> i32 {
    operations()
}

operations: () -> i32 {
    // Here is an exciting variable binding!
    let x = num() + ((10 + 2) * 2); // x = 25
    x += 1 + 2; // 28

    // let z = 10; // ---> Compiler error!
    let y = 4; // y = 4
    y = y - 2; // y = 2

    // 28 + 2 = 30
    x + y // or `return x + y;`
}

num: () -> i32 {
    1
}

// size: 24, alignment: 8
// #[derive(Copy)]
Sandwich: struct {
    /*
    * Structs have C style representation, with
    * garaunteed ordering.
    */
    bread: Bread,     // size:    16, alignment: 8
    butter: u8,       // size:    1, alignment: 1
    // lettuce: Lettuce,
                      // padding: 6
}

// where `DeriveMacro` = (ty: T) -> TokenStream
// impl_copy: DeriveMacro {
//     let stream = TokenStream::new();
//
//     let name = T::name();
//     let fields: Vec<String> = ty.fields.iter().map(|field| {
//         let name = field.name;
//         stream! { #name: self.#name.copy(), }
//     }).collect();
//
//     stream.append(stream! {
//         impl Copy for #name {
//             copy: (&self) -> Self {
//                 Self {
//                     #(#fields)*,
//                 }
//             }
//         }
//     });
//
//     stream
// }
//
// impl_copy: (ty: T) -> Impl(T) {
//     match ty.info() {
//         TyInfo::Struct(data) => {
//             let t_impl = Impl::new(Copy).for(T);
//             t_impl.func(Func::new(Body::new(FuncDef::new(ty, fields))))
//         }
//         ty => diag!("Cannot impl copy for `{}`", ty),
//     }
// }

// size: 16, alignment: 8
Bread: struct {
    grain: i32, // size:     4, alignment: 4
                // padding:  4
    seed: i64,  // size:     8, alignment: 8
}

// size: 1, alignment: 1
Lettuce: enum {
    Crisp, // 0
    Soggy, // 1
}

// make: () -> Sandwich {
//     let sandwich = Sandwich {
//         butter: 69,
//         bread: Bread {
//             grain: 72,
//             seed: 2,
//         }
//     };
//
//     // sandwich.butter = 42;
//     // sandwich.bread = Bread {
//     //     grain: 27,
//     //     seed: 5,
//     // };
//
//     sandwich
// }


