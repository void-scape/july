// ------------ Structs ------------

// size: 24, alignment: 8
Sandwich: struct {
    /*
    * Structs have C style representation, with
    * garaunteed ordering.
    */
    bread: Bread,     // size:    16, alignment: 8
    butter: u8,       // size:    1, alignment: 1
    // lettuce: Lettuce,
                      // padding: 6
}

// size: 16, alignment: 8
Bread: struct {
    grain: i32, // size:     4, alignment: 4
                // padding:  4
    seed: i64,  // size:     8, alignment: 8
}

// size: 1, alignment: 1
Lettuce: enum {
    Crisp, // 0
    Soggy, // 1
}

// ------------ Return Statements ------------
//
// ```
// return [<expr>];
// ```
//
// ```
// some_block: i32 {
//     <expr: i32>
// }
// ```

return_statement: () -> i64 {
    return 42;
}

int_lit: () -> i32 {
    12
}

bin_op: () -> i32 {
    int_lit() + 4
}

struct_definition: () -> Bread {
    Bread {
        grain: 12,
        seed: 4,
    }
}

strukt_field: () -> i64 {
    let bread = struct_definition();

    bread.seed
}

variable: () -> Bread {
    let bread = struct_definition();

    bread
}

procedure: () -> Bread {
    struct_definition()
}

// ------------ Assignment Statements ------------
//
// ```
// <var> [+]= <expr>;
// ```
//

assign: () -> i32 {
    let x = 10;

    x = 4;

    x
}

var_2_var: () -> i32 {
    let x = assign();
    let y: i32 = x;

    let bread = Bread {
        // grain: assign(),
        grain: 12,
        seed: 4,
    };
    let other: Bread = bread;
    // other.grain = y;

    // let s = Sandwich {
    //     butter: 98,
    //     bread: struct_definition(),
    // };

    // other.grain = s.bread.grain;

    // s.bread.grain


    // y + other.grain + 4 + assign() // 24
    // other.grain + assign() // 16
    other.grain + y // 16
}

struct_field: () -> i64 {
    let bread = Bread {
        grain: 12,
        seed: 4,
    };

    bread.seed = 29;

    bread.seed
}

conjugate: () -> i32 {
    let x = 68;

    // x = x + 1
    x += 1;

    x
}

// ------------ Demo ------------

main: () -> i32 {
    var_2_var()
    // operations()
}

operations: () -> i32 {
    let x = num() + ((10 + 2) * 2); // x = 25
    x += 1 + 2; // 28

    let y = 4; // y = 4
    y = y - 2; // y = 2

    x + y // 28 + 2 = 30
}

num: () -> i32 {
    return 1;
}
