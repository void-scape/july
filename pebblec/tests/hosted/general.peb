use core::io;

// Test basic assignment operations
test_assignment: () -> bool {
    // Variable declarations and assignments
    let a: i32 = 10;
    let b: i32 = 20;
    b = 30;
    
    let c = 40; // Type inference
    let d = 50;
    d = 60;

    // Multiple assignments
    let m = 15;
    let n = 25;
    m = 20;
    n = 30;
    
    // Test results
    a == 10 && b == 30 && c == 40 && d == 60 && m == 20 && n == 30
}

// Test integer arithmetic operations
test_integer_arithmetic: () -> bool {
    let a: i32 = 10;
    let b: i32 = 5;
    
    // Basic operations
    let add = a + b;       // 15
    let sub = a - b;       // 5
    let mul = a * b;       // 50
    let div = a / b;       // 2
    let rem = a % b;       // 0

    // Compound operations
    let c = 10;
    c += 5;                // 15
    c -= 3;                // 12
    c *= 2;                // 24
    c /= 3;                // 8
    c %= 5;                // 3
    
    // Edge cases
    let max_i32: i32 = 2147483647;
    let min_i32: i32 = -2147483648;
    let overflow = max_i32 + 1;  // Should wrap to min_i32
    let underflow = min_i32 - 1; // Should wrap to max_i32
    
    add == 15 && sub == 5 && mul == 50 && div == 2 && rem == 0 
        && c == 3 && overflow == min_i32 && underflow == max_i32
}

// Test floating point arithmetic
test_float_arithmetic: () -> bool {
    let a: f64 = 10.5;
    let b: f64 = 2.5;
    
    // Basic operations
    let add = a + b;       // 13.0
    let sub = a - b;       // 8.0
    let mul = a * b;       // 26.25
    let div = a / b;       // 4.2
    
    // Compound operations
    let c: f64 = 10.0;
    c += 2.5;              // 12.5
    c -= 1.5;              // 11.0
    c *= 2.0;              // 22.0
    c /= 2.0;              // 11.0
    
    // Special cases
    let infinity: f64 = 1.0 / 0.0;
    let neg_infinity: f64 = -1.0 / 0.0;
    let nan: f64 = 0.0 / 0.0;
    
    // Within epsilon comparison for floating points
    let epsilon: f64 = 0.0001;
    let is_add_correct = abs(add - 13.0) < epsilon;
    let is_sub_correct = abs(sub - 8.0) < epsilon;
    let is_mul_correct = abs(mul - 26.25) < epsilon;
    let is_div_correct = abs(div - 4.2) < epsilon;
    let is_c_correct = abs(c - 11.0) < epsilon;
    
    is_add_correct && is_sub_correct && is_mul_correct && is_div_correct 
        && is_c_correct && infinity > 0.0 && neg_infinity < 0.0
}

abs: (input: f64) -> f64 {
    if input < 0. {
        -input
    } else {
        input
    }
    // input <<= 1;
    // input >> 1
}

// Test boolean operations
test_boolean_operations: () -> bool {
    let a = true;
    let b = false;
    
    // Logical operations
    let and_result = a && b;         // false
    let or_result = a || b;          // true
    let not_a = !a;                  // false
    let not_b = !b;                  // true
    let xor_result = a != b;         // true
    
    // Compound expressions
    let complex = (a || b) && (!b);  // true
    
    and_result == false && or_result == true && not_a == false && not_b == true
        && xor_result == true 
        && complex == true
}

// Test bitwise operations
test_bitwise_operations: () -> bool {
    let a: i32 = 0b1100;
    let b: i32 = 0b0011;
    
    // Basic bitwise operations
    let and_result = a & b;          // 0b0000 (0)
    let or_result = a | b;           // 0b1111 (15)
    let xor_result = a ^ b;          // 0b1111 (15)
    let not_a = !a;                  // ~0b1100 (-13 in two's complement)
    
    // Shift operations
    let left_shift = 0b0001 << 2;    // 0b0100 (4)
    let right_shift = 0b1000 >> 2;   // 0b0010 (2)
    
    // Compound operations
    let c: i32 = 0b1010;
    c &= 0b1100;                     // 0b1000 (8)
    c |= 0b0001;                     // 0b1001 (9)
    c ^= 0b1001;                     // 0b0000 (0)
    c = 0b0001;
    c <<= 3;                         // 0b1000 (8)
    c >>= 1;                         // 0b0100 (4)
    
    and_result == 0 && or_result == 15 && xor_result == 15 && not_a == -13
        && left_shift == 4 && right_shift == 2 && c == 4
}

// Test comparison operations
test_comparison_operations: () -> bool {
    let a: i32 = 10;
    let b: i32 = 20;
    let c: i32 = 10;
    
    // Integer comparisons
    let eq = a == c;           // true
    let neq = a != b;          // true
    let lt = a < b;            // true
    let gt = b > a;            // true
    let lte = a <= c;          // true
    let gte = a >= c;          // true
    
    // Float comparisons
    let f1: f64 = 10.5;
    let f2: f64 = 10.5;
    let f3: f64 = 20.7;
    
    let feq = f1 == f2;        // true
    let fneq = f1 != f3;       // true
    let flt = f1 < f3;         // true
    let fgt = f3 > f1;         // true
    let flte = f1 <= f2;       // true
    let fgte = f1 >= f2;       // true
    
    eq && neq && lt && gt && lte && gte 
        && feq && fneq && flt && fgt && flte && fgte
}

// Test array operations
test_array_operations: () -> bool {
    // Array initialization
    let arr1: [i32; 5] = [1, 2, 3, 4, 5];
    let arr2 = [10, 20, 30, 40, 50];
    
    // Array access and modification
    let first = arr1[0];        // 1
    arr2[1] = 25;
    
    // Array iteration
    // let sum = 0;
    // for i in arr1 {
    //     sum += i*;
    // }
    
    // Array slicing
    let slice_sum = 0;
    // let slice = &arr1[1..4];    // [2, 3, 4]
    // for i in slice {
    //     slice_sum += i*;
    // }
    
    first == 1 && arr2[1] == 25 && slice_sum == 0 //9
}

// Test type conversions
test_type_conversions: () -> bool {
    // Numeric conversions
    let i: i32 = 42;
    let f: f64 = i as f64;          // 42.0
    let b: i8 = i as i8;            // 42
    let u: u32 = i as u32;          // 42
    
    // Truncation
    let large: i32 = 300;
    let truncated: i8 = large as i8;  // Out of range for i8, should be truncated
    
    // // String conversions
    // let s = i.to_string();          // "42"
    // let parsed = s.parse::<i32>().unwrap();  // 42
    
    // Boolean conversions
    let b_int: i32 = true as i32;   // 1
    let b_from_int = b_int != 0;    // true
    
    f == 42.0 && b == 42 && u == 42 && truncated == 44 && b_int == 1 && b_from_int
}

// Test control flow
test_control_flow: () -> bool {
    // If statements
    let a = 0;
    if true {
        a = 1;
    }
    
    let b = 0;
    if false {
        b = 1;
    } else {
        b = 2;
    }
    
    let c = 0;
    if false {
        c = 1;
    } else {
        if true {
            c = 2;
        } else {
            c = 3;
        }
    }
    
    // Ternary-like expressions
    let d = if true { 10 } else { 20 };
    
    // While loops
    // let counter = 0;
    let sum = 10;
    // while counter < 5 {
    //     sum += counter;
    //     counter += 1;
    // }
    
    // For loops
    let product = 1;
    for i in 1..5 {  // 1, 2, 3, 4
        product *= i;
    }
    
    // Break and continue
    let acc = 0;
    for i in 0..10 {
        if i % 2 == 0 {
            continue;
        }
        if i > 7 {
            break;
        }
        acc += i;
    }
    
    a == 1 && b == 2 && c == 2 && d == 10 && sum == 10 && product == 24 && acc == 16
}

// Main test runner - executes all tests
main: () {
    // TODO: why?
    // test(0. / 0. != 0. / 0.);
    test(test_assignment());
    test(test_integer_arithmetic());
    test(test_float_arithmetic());
    test(test_boolean_operations());
    test(test_bitwise_operations());
    test(test_comparison_operations());
    test(test_array_operations());
    test(test_type_conversions());
    test(test_control_flow());
}

I: const u32 = 0;

test: (condition: bool) {
    print("Test % .................... ", I);
    if condition { println("Ok"); } else { println("Fail"); }
    
    I += 1;
}
